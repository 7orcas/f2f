@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject LoginService LoginService
@using Newtonsoft.Json;
@using GC = FrontendLogin.GlobalConstants;

<h3>Login</h3>
<EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Username:</label>
        <InputText @bind-Value="loginRequest.Username" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="loginRequest.Password" Type="password" />
    </div>
    <div>
        <label>Org:</label>
        <InputNumber @bind-Value="loginRequest.Org" />
    </div>
    <div>
        <label>Language:</label>
        <InputText @bind-Value="loginRequest.LangCode" />
    </div>
    <button type="submit">Login</button>
</EditForm>

<p>@successMessage</p>
<p>@errorMessage</p>
<p>@tokenkey</p>
<p>@token</p>

@code {
    private LoginRequest loginRequest = new LoginRequest
    {
        LangCode = "en"    
    };
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string tokenkey;
    private string token;
    private string test;

    private async Task HandleLogin()
    {
        try
        {
            loginRequest.SourceApplication = GC.AppClient;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            var client = HttpClientFactory.CreateClient("BackendApi");

            var response = await client.PostAsJsonAsync("api/Login/login", loginRequest);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                var responseDto = JsonConvert.DeserializeObject<_ResponseDto>(result);

                if (responseDto.Valid)
                {
                    var login = JsonConvert.DeserializeObject<LoginTokenDto>(responseDto.Result.ToString());
                    successMessage = responseDto.SuccessMessage;
                    tokenkey = login.TokenKey;
                    token = login.Token;

//await TestPause();

                    NavigationManager.NavigateTo(login.MainUrl + "?tk=" + tokenkey, true);
                }
                else
                {
                    errorMessage = responseDto.ErrorMessage;
                }

                // Save token, e.g., in localStorage if this were Blazor WebAssembly
            }
            else
            {
                errorMessage = "Invalid username or password + "
                    + test;

            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task TestPause()
    {
        await Task.Delay(3000);
    }


    protected override async Task OnInitializedAsync()
    {
        loginRequest.Org = 1;
        test = await LoginService.LoginAsync();
    }

}