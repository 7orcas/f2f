@page "/machines"
@inherits BasePage
@attribute [Authorize]

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject MachineService MachineService
@using Newtonsoft.Json;


@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore


<ErrorBoundary @ref="errorBoundary">
    <ChildContent>

        <AppTitle title="Machines" PageCode="m01">
            Direct Soling machines
        </AppTitle>

        @if (_isLoading)
        {
            <Loading/>
        }
        else @if (_isError)
        {
            <AppError Message=@_errorMessage>
                @exception
            </AppError>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var machine in machines)
                    {
                        <tr>
                            <td>@machine.Code</td>
                            <td>@machine.Description</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
     </ChildContent>
    <ErrorContent Context="Error">
        
        <p>An error has occurred: @Error.Message</p>
        <button @onclick="Recover">Recover</button>
    </ErrorContent>
</ErrorBoundary>

@code {
    private List<MachineDto>? machines;

    // private void ThrowException()
    // {
    //     throw new InvalidOperationException("This is a test exception.");
    // }

    private void Recover()
    {
        errorBoundary.Recover();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetClient();

            Func<Task<Result>> lambda = async () =>
            {
                var r = await MachinesAsync();
                return new Result { result = r.machines, message = r.message };
            };

            var result = await RunLoad(lambda);

            machines = result.result as List<MachineDto>;
            _errorMessage = result.message;
            
            _isError = machines == null || !string.IsNullOrEmpty(_errorMessage);
            StateHasChanged();
        }
    }

    protected async Task<(List<MachineDto> machines, string message)> MachinesAsync()
    {
        var list = new List<MachineDto>();
        var message = "";
        var response = await _client.GetAsync("api/Machine/list");
        try
        {
            var result = await response.Content.ReadAsStringAsync();
            var responseDto = JsonConvert.DeserializeObject<_ResponseDto>(result);

            if (responseDto.Valid)
                list = JsonConvert.DeserializeObject<List<MachineDto>>(responseDto.Result.ToString());
            else
                message = responseDto.ErrorMessage;


            return (list, message);
        }
        catch
        {
            var result = await response.Content.ReadAsStringAsync();
            if (!string.IsNullOrEmpty(result))
                return (list, result);

            //ToDo label
            return (list, "Opps, something went wrong?");
        }
    }
}