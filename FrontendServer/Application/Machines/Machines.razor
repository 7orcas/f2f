@attribute [Route(AppPageRoutes.MachinesRoute)]
@inherits BasePage
@attribute [Authorize]

<ErrorBoundary @ref="errorBoundary">
    <ChildContent>

        <Header TitleKey="Machines"
                SubTitleKey="MachSub"
                PageCode=@_pageCode />
        

        @if (_isLoading || _isError)
        {
            <LoadingWithError 
                IsLoading=@_isLoading
                IsError=@_isError
                StatusCode=@_statusCode
                Message=@_errorMessage>
                @exception
            </LoadingWithError>
        }
        else
        {
            <Label Key="AddRecordXX"></Label>
            <Label Key="AddRecord"></Label>
            
            <table class="table">
                <thead>
                    <tr>
                        <th><Label Key="Code"></Label></th>
                        <th><Label Key="Desc"></Label></th>
                        <th><Label Key="xDummy"></Label></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var machine in machines)
                    {
                        <tr>
                            <td>@machine.Code</td>
                            <td>@machine.Description</td>
                            <td></td>
                        </tr>
                    }
                </tbody>
            </table>

            <Label Key="Bottom"></Label>
        }
     </ChildContent>
    <ErrorContent Context="Error">
        
        <p>An error has occurred: @Error.Message</p>
        <button @onclick="Recover">Recover</button>
    </ErrorContent>
</ErrorBoundary>

@code {
    private List<MachineDto>? machines;
  

    private void Recover()
    {
        errorBoundary.Recover();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitialiseBasePage();
            _pageCode = AppPageRoutes.MachinesPageCode;
            machines = await GetAsync<List<MachineDto>>("api/Machine/list");

            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
    }

}