@attribute [Route(ModPageRoutes.RouteMachines)]
@inherits BasePage
@attribute [Authorize]

<ErrorBoundary @ref="errorBoundary">
    <ChildContent>

        <AppTitle title="Machines" PageCode="m01">
            Direct Soling machines
        </AppTitle>

        @if (_isLoading)
        {
            <Loading/>
        }
        else @if (_isError)
        {
            <AppError Message=@_errorMessage>
                @exception
            </AppError>
        }
        else
        {
            <Label Key="AddRecordXX"></Label>
            <Label Key="AddRecord"></Label>

            <table class="table">
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var machine in machines)
                    {
                        <tr>
                            <td>@machine.Code</td>
                            <td>@machine.Description</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
     </ChildContent>
    <ErrorContent Context="Error">
        
        <p>An error has occurred: @Error.Message</p>
        <button @onclick="Recover">Recover</button>
    </ErrorContent>
</ErrorBoundary>

@code {
    private List<MachineDto>? machines;

    // private void ThrowException()
    // {
    //     throw new InvalidOperationException("This is a test exception.");
    // }

    private void Recover()
    {
        errorBoundary.Recover();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SetLabels();
            machines = await Call<List<MachineDto>>("api/Machine/list");

            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
    }

}