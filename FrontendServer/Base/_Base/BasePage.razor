@inherits BaseComponent

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject CacheService CS
@inject ProtectedSessionStorage ProtectedSessionStore
@inject ConfigService ConfS
@inject LabelService LS
@inject ThemeService TS


@using GC = FrontendServer.GlobalConstants;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@code {
    [Inject] protected IJSRuntime JS { get; set; }

    public bool _isLoading = false;
    public bool _isError = false;
    public bool _isSaving = false;
    public string? _pageCode;
    private string? _token;
    public HttpClient? _client;
    public MarkupString? _errorMessage;
    public int? _statusCode;
    public ErrorBoundary? errorBoundary;
    public Exception? exception;
    private AppConfigDto _config;
    private Dictionary<string, LangLabelDto> _labels;

    //Debugging
    public bool _debugOutlined = false;


    public async Task InitialiseBasePage()
    {
        if (!ConfS.IsInitialized)
        {
            await ConfS.Initialise();
            string? t = await ConfS.GetToken();
            ConfS.SetLoginParameters(null, t);
        }

        if (!LS.IsInitialized)
            await LS.Initialise(ConfS.loginParameters);

        _config = ConfS.Config;
        _labels = LS.Labels;
    }

    //DarkMode
    protected override void OnInitialized() => TS.OnThemeChanged += OnThemeChanged;
    private void OnThemeChanged() => InvokeAsync(StateHasChanged);
    public void Dispose() => TS.OnThemeChanged -= OnThemeChanged;

    public async Task<HttpClient> SetClient()
    {
        var store = await ProtectedSessionStore.GetAsync<string>(GC.TokenCacheKey);
        if (store.Success)
            _token = store.Value;
        else
            NavigationManager.NavigateTo("https://localhost:7289", true);  //ToDo Change me!

        _client = HttpClientFactory.CreateClient(GC.AuthorizedClientKey);
        _client.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue(GC.BearerKey, _token);

        //SetLabels();
        return _client;
    }

    public async Task<T> GetAsync<T>(string url)
    {
        _isLoading = true;

        await SetClient();

        var response = await _client.GetAsync(url);

        try
        {
            response.EnsureSuccessStatusCode();
            var r = await response.Content.ReadAsStringAsync();
            var dto = JsonConvert.DeserializeObject<_ResponseDto>(r);
            _statusCode = dto.StatusCode;
            _isLoading = false;

            if (dto.Valid)
                return JsonConvert.DeserializeObject<T>(dto.Result.ToString());

            _errorMessage = new MarkupString(dto.ErrorMessage);
        }
        catch
        {
            _statusCode = -1;
            try
            {
                var r = await response.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(r))
                    _errorMessage = new MarkupString(r);
                //ToDo label
                else
                    _errorMessage = new MarkupString("Opps, something went wrong");
            }
            catch(Exception ex)
            {
                _errorMessage = new MarkupString($"Exception occurred: {ex.Message}");
            }
        }

        _isLoading = false;
        _isError = true;
        return default;
    }

    public MarkupString AppendMarkupString(MarkupString m, string s)
    {
        if (string.IsNullOrEmpty(m.ToString()))
            return new MarkupString(s);

        return new MarkupString(m.ToString() + "<br>" + s);
    }

    public void PutCacheString(string key, string s) => CS.PutString(key + "-" + _config.UniqueSessionId, s);
    public string? GetCacheString(string key) => CS.GetString(key + "-" + _config.UniqueSessionId);
    public string GetListRowOddEvenClass (int i) {
        if (TS.IsDarkMode)
            return i % 2 == 0 ? " list-odd-row-dm" : " list-even-row-dm";
        return i % 2 == 0 ? " list-odd-row" : " list-even-row";
    }
  
}