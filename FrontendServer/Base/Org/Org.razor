@attribute [Route(BasePageRoutes.OrgRoute)]
@inherits BasePage
@attribute [Authorize]
@inject HttpClient Http
@using System.Text;
@using sysJ = System.Text.Json
@using GC = FrontendServer.GlobalConstants;

<AppTitle TitleKey="Org" PageCode=@_pageCode>
    <Label Key="OrgSub"></Label>
</AppTitle>


@if (_isLoading || _isError)
{
    <LoadingWithError IsLoading=@_isLoading
                      IsError=@_isError
                      Message=@_errorMessage>
        @exception
    </LoadingWithError>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><Label Key="LangCode"></Label></th>
                <th><Label Key="Editable"></Label></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var lang in org.Languages)
            {
                <tr>
                    <td>@lang.LangCode</td>
                    <td><MudCheckBox @bind-Value="@lang.IsEditable" Variant="Variant.Filled"></MudCheckBox></td>
                </tr>
            }
        </tbody>
    </table>

    <div>
        
        <MudTextField Label="LangCode" @bind-Value="@org.LangCode" Variant="Variant.Filled"></MudTextField>
        
        <p></p>
        <MudNumericField Label="MinLength" @bind-Value="@org.PasswordRule.MinLength" Variant="Variant.Filled"></MudNumericField>
        <MudNumericField Label="MaxLength" @bind-Value="@org.PasswordRule.MaxLength" Variant="Variant.Filled"></MudNumericField>
        <MudCheckBox Label="IsMixedCase" @bind-Value="@org.PasswordRule.IsMixedCase" Variant="Variant.Filled"></MudCheckBox>
        <MudCheckBox Label="IsNonLetter" @bind-Value="@org.PasswordRule.IsNonLetter" Variant="Variant.Filled"></MudCheckBox>
        <MudCheckBox Label="IsNumber" @bind-Value="@org.PasswordRule.IsNumber" Variant="Variant.Filled"></MudCheckBox>
    </div>

    <button @onclick="Save">Save</button>
}


@code {
    private OrgDto? org;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitialiseBasePage();
            _pageCode = BasePageRoutes.OrgPageCode;
            org = await Call<OrgDto>(GC.URL_org);

            

            StateHasChanged();
        }
    }

    private async void Save()
    {
        var json = sysJ.JsonSerializer.Serialize(org);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        var client = await SetClient();

        var response = await client.PostAsync(GC.URL_org_update, content);

    }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
    }
}