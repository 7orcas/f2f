@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@using Newtonsoft.Json;

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore


@code {
    public bool _isLoading = true;
    public bool _isError = false;
    private string? _token;
    public HttpClient? _client;
    public string? _errorMessage;
    public ErrorBoundary? errorBoundary;
    public Exception? exception;

    public async Task SetClient()
    {
        var store = await ProtectedSessionStore.GetAsync<string>("tokenX");
        if (store.Success)
            _token = store.Value;
        else
            NavigationManager.NavigateTo("https://localhost:7289", true);  //ToDo Change me!

        _client = HttpClientFactory.CreateClient("AuthorizedClient");
        _client.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _token);
    }

    // public async Task<Result> RunLoad(Func<Task<Result>> action)
    // {
    //     _isLoading = true;
    //     try
    //     {
    //         return await action();
    //     }
    //     catch (Exception x)
    //     {
    //         exception = x;
    //         _errorMessage = x.Message;
    //         _isError = true;
    //         return default;
    //     }
    //     finally
    //     {
    //         _isLoading = false;
    //     }
    // }

    public async Task<T> Call<T>(string url)
    {
        await SetClient();

        var response = await _client.GetAsync(url);

        try
        {
            response.EnsureSuccessStatusCode();
            var r = await response.Content.ReadAsStringAsync();
            var dto = JsonConvert.DeserializeObject<_ResponseDto>(r);
            _isLoading = false;

            if (dto.Valid)
                return JsonConvert.DeserializeObject<T>(dto.Result.ToString());

            _errorMessage = dto.ErrorMessage;
        }
        catch
        {
            try
            {
                var r = await response.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(r))
                    _errorMessage = r;
                //ToDo label
                else
                    _errorMessage = "Opps, something went wrong";
            }
            catch(Exception ex)
            {
                _errorMessage = $"Exception occurred: {ex.Message}";
            }
        }

        _isLoading = false;
        _isError = true;
        return default;
    }

}