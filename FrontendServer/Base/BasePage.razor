@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject CacheService Cache

@using GC = FrontendServer.GlobalConstants;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore


@code {
    public bool _isLoading = false;
    public bool _isError = false;
    private string? _token;
    public HttpClient? _client;
    public MarkupString? _errorMessage;
    public ErrorBoundary? errorBoundary;
    public Exception? exception;
    private AppConfigDto _config;
    private Dictionary<string, LangLabelDto> _labels;

    public async Task<HttpClient> SetClient()
    {
        var store = await ProtectedSessionStore.GetAsync<string>(GC.TokenCacheKey);
        if (store.Success)
            _token = store.Value;
        else
            NavigationManager.NavigateTo("https://localhost:7289", true);  //ToDo Change me!

        _client = HttpClientFactory.CreateClient(GC.AuthorizedClientKey);
        _client.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue(GC.BearerKey, _token);

        SetLabels();
        return _client;
    }
        
    

    public async Task<T> Call<T>(string url)
    {
        _isLoading = true;

        await SetClient();

        var response = await _client.GetAsync(url);

        try
        {
            response.EnsureSuccessStatusCode();
            var r = await response.Content.ReadAsStringAsync();
            var dto = JsonConvert.DeserializeObject<_ResponseDto>(r);
            _isLoading = false;

            if (dto.Valid)
                return JsonConvert.DeserializeObject<T>(dto.Result.ToString());

            _errorMessage = new MarkupString(dto.ErrorMessage);
        }
        catch
        {
            try
            {
                var r = await response.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(r))
                    _errorMessage = new MarkupString(r);
                //ToDo label
                else
                    _errorMessage = new MarkupString("Opps, something went wrong");
            }
            catch(Exception ex)
            {
                _errorMessage = new MarkupString($"Exception occurred: {ex.Message}");
            }
        }

        _isLoading = false;
        _isError = true;
        return default;
    }

    public MarkupString AppendMarkupString(MarkupString m, string s)
    {
        if (string.IsNullOrEmpty(m.ToString()))
            return new MarkupString(s);

        return new MarkupString(m.ToString() + "<br>" + s);
    }

    public async void PutCacheString(string key, string s)
    {
        if (_config == null)
            await SetConfig();
        Cache.PutString(key + "-" + _config.UniqueSessionId, s);
    }

    public async Task<string?> GetCacheString(string key)
    {
        if (_config == null)
            await SetConfig();
        return Cache.GetString(key + "-" + _config.UniqueSessionId);
    }

}