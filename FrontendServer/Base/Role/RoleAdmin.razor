@attribute [Route(BaseRoutes.RoleRoute)]
@inherits BasePage
@attribute [Authorize]


<ConfirmNavigation List="roles" />

<!-- @key Forces a refresh -->
<Header @key="_stateChangedToggle"
        TitleKey="Roles"
        SubTitleKey="RoleSub"
        PageCode=@BaseRoutes.RolePageCode
        IsReadOnly="@_isCrudRO"
        ToolBarButtons="toolBarButtons"/>


@if (_isLoading || _isError || _isSaving)
{
    <LoadingWithError IsLoading=@_isLoading
                      IsSaving=@_isSaving
                      IsError=@_isError
                      Message=@_errorMessage>
        @exception
    </LoadingWithError>
    <MudSkeleton Height="100%" Width="100%" />
}
else
{
    <MudGrid Class="mt-4">
    
        <!-- Left Side: List -->
        @if (showList)
        {
            <MudItem xs="2">
                <MudPaper Elevation="0" Outlined="true">
                    <MudTable Items="@roles"
                              Height="@tableHeight"
                              FixedHeader="true"
                              Hover="true"
                              Bordered="true"
                              Striped="true">

                        <HeaderContent>
                            <MudTh><Label Key="Role" /></MudTh>
                            <MudTh><Label Key="Active" /></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Column 1"
                                   Class="@(selections.Contains(context) ? "selected-row" : null)"
                                   @onclick="() => OnItemSelected(context)">
                                   @context.Code
                            </MudTd>
                            <MudTd DataLabel="Column 2">
                                <MudCheckBox T="bool"
                                             ReadOnly="@(!_isCrudU)"
                                             @bind-Value="context.IsActive"/>
                            </MudTd>
                        </RowTemplate>

                    </MudTable>
                </MudPaper>
            </MudItem>
        }


        <!-- Right Side: Details -->
        @if (selections.Count > 0)
        {
            <MudItem xs="8">
                <MudPaper Elevation="0" Outlined="@_debugOutlined">
                    <div style="max-height: @tableHeight; overflow-y: auto;">

                        <table class="mud-table mud-table-hover mud-table-bordered mud-table-striped full-width-table" style="width: 100%;">

                            <!-- Header -->
                            <thead class="mud-table-head">
                                <tr class="mud-table-row">

                                    <th class="mud-table-cell sticky-header" rowspan="2"><Label Key="Perm"/></th>
                                    @for (int i = 0; i < selections.Count; i++)
                                    {
                                        <th class="mud-table-cell sticky-header" style="text-align: center;" colspan="4">@selections[i].Code</th>
                                    }
                                </tr>
                                <tr class="mud-table-row">
                                    @foreach (var role in selections)
                                    {
                                        <th class="mud-table-cell sticky-header" style="text-align: center;"><Label Key="Crud.C" /></th>
                                        <th class="mud-table-cell sticky-header" style="text-align: center;"><Label Key="Crud.R" /></th>
                                        <th class="mud-table-cell sticky-header" style="text-align: center;"><Label Key="Crud.U" /></th>
                                        <th class="mud-table-cell sticky-header" style="text-align: center;"><Label Key="Crud.D" /></th>
                                    }
                                </tr>

                            </thead>
                            <tbody class="mud-table-body">

                                @foreach (var permission in selections.First().RolePermissions)
                                {
                                    <tr class="mud-table-row">

                                        <td class="mud-table-cell">@permission.Permission</td>
                                        @foreach (var role in selections)
                                        {
                                            var matching = role.RolePermissions.FirstOrDefault(p => p.PermissionNr == permission.PermissionNr);
                                            <td class="mud-table-cell">
                                                <MudCheckBox T="bool" 
                                                             Value="@IsCrud(matching, GC.CrudCreate)"
                                                             ValueChanged="@(v => SetCrud(matching, GC.CrudCreate, v))"
                                                             ReadOnly="@(!_isCrudU)" />
                                            </td>
                                            <td class="mud-table-cell">
                                                <MudCheckBox T="bool" 
                                                             Value="@IsCrud(matching, GC.CrudRead)"
                                                             ValueChanged="@(v => SetCrud(matching, GC.CrudRead, v))"
                                                             ReadOnly="@(!_isCrudU)" />
                                            </td>
                                            <td class="mud-table-cell">
                                                <MudCheckBox T="bool" 
                                                             Value="@IsCrud(matching, GC.CrudUpdate)"
                                                             ValueChanged="@(v => SetCrud(matching, GC.CrudUpdate, v))"
                                                             ReadOnly="@(!_isCrudU)" />
                                            </td>
                                            <td class="mud-table-cell">
                                                <MudCheckBox T="bool" 
                                                             Value="@IsCrud(matching, GC.CrudDelete)"
                                                             ValueChanged="@(v => SetCrud(matching, GC.CrudDelete, v))"
                                                             ReadOnly="@(!_isCrudU)" />
                                            </td>

                                        }
                                    </tr>
                                }
                            </tbody>
                        
                        </table>
                    </div>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}

@using System.Net
@using MudBlazor
@using FrontendServer.Base.Util
@using System.Text;
@using sysJ = System.Text.Json
@using FrontendServer.Base._Base;
@using GC = FrontendServer.GlobalConstants;

@code {
    private string tableHeight = "70vh";
    private int maxSelections = 3;
    private bool showList = false;
    private List<RoleDto> roles;
    private List<RoleDto> selections = new List<RoleDto>();
    private List<ToolBarButton> toolBarButtons = new List<ToolBarButton>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitialiseBasePage(GC.PerRole);
            _pageCode = BaseRoutes.OrgPageCode;

            roles = await GetAsync<List<RoleDto>>(GC.URL_role_list);

            if (roles.Count > 0)
                Select(roles[0], true);

            showList = roles.Count > 1;

            if (!_isCrudRO)
            {
                toolBarButtons.Add(new ToolBarButton { LangKey = "RoleA", Action = AddRole });
                toolBarButtons.Add(new ToolBarButton { LangKey = "SaveChg", Action = SaveAsync });
                toolBarButtons.Add(new ToolBarButton { Label = GetLabel("RoleA"), Action = AddRole });
                //toolBarButtons.Add(new ToolBarButton { Label = GetLabel("SaveChg"), Action = SaveAsync });
            }

            ForceStateHasChanged();
        }
    }

    private async void OnItemSelected(RoleDto r) => Select(r, false);

    private async void Select(RoleDto dto, bool force)
    {
        int index = -1;
        if (!dto.IsLoaded || force)
        {
            var roleDto = await GetAsync<RoleDto>(GC.URL_role + dto.Id, true);
            roleDto.HashMe();
            roleDto.IsLoaded = true;
            index = roles.FindIndex(r => r.Id == dto.Id);
            roles[index] = roleDto;
            dto = roleDto;
        }

        index = selections.FindIndex(r => r.Id == dto.Id);

        //Already selected?
        if (index >= 0)
            selections.RemoveAt(index);
        else 
        {
            if (selections.Count >= maxSelections)
                selections.RemoveAt(0);

            selections.Add(dto);
        }

        StateHasChanged();
    }

    private bool IsCrud(RolePermissionDto p, string crudChar) => !string.IsNullOrEmpty(p.Crud) && p.Crud.Contains(crudChar);

    private void SetCrud(RolePermissionDto? match, string crudChar, bool value)
    {
        if (match == null) return;

        var crud = match.Crud ?? "";
        if (!value)
            crud = crud.Replace(crudChar, "");
        else
            crud += crudChar;

        var crudx = "";
        if (crud.Contains(GC.CrudCreate)) crudx += GC.CrudCreate;
        if (crud.Contains(GC.CrudRead)) crudx += GC.CrudRead;
        if (crud.Contains(GC.CrudUpdate)) crudx += GC.CrudUpdate;
        if (crud.Contains(GC.CrudDelete)) crudx += GC.CrudDelete;
        match.Crud = crudx;
    }



    private async Task SaveAsync()
    {
        _isSaving = true;
        // var curIndex = roleDto != null ? list.FindIndex(d => d.Id == roleDto.Id) : -1;
        // // var client = await SetClient();
        // for (int i = 0; i < list.Count; i++)
        // {
        //     var dto = list[i];
        //     if (dto.IsLoaded && dto.HasChanged())
        //     {

        //         // var json = sysJ.JsonSerializer.Serialize(dto);
        //         // var content = new StringContent(json, Encoding.UTF8, "application/json");
        //         // var response = await client.PostAsync(GC.URL_org_update, content);

        //         var response = await PostAsync<OrgDto>(GC.URL_org_update, dto);

        //         if (response.StatusCode == HttpStatusCode.OK)
        //         {
        //             var o = await GetAsync<OrgDto>(GC.URL_org + dto.Id);
        //             list[i] = o.HashMe().SetLoaded();
        //         }
        //     }
        // }
         _isSaving = false;

        // if (curIndex != -1)
        //     OnItemSelected(curIndex);
    }

    private async Task AddRole()
    {
        var x = 0;
    }


    //ToDo
    private async void Export()
    {

    }

    private string Label(string key) => GetLabel(key);
    protected override async Task OnInitializedAsync() => _isLoading = true;

}