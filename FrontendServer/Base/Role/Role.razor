@page "/role"
@inherits BasePage
@attribute [Authorize]

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject RoleService RoleService
@using Newtonsoft.Json;

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore


<h3>All Roles</h3>

@if (_isLoading)
{
    <div>loading....</div>
}
else if (_isError)
{
    <div>@_errorMessage</div>
}        
else
{
    <table class="table">
        <thead>
            <tr>
                <th>RoleId</th>
                <th>Role</th>
                <th>orgNr</th>
                <th>Role Description</th>
                <th>Updated</th>
                <th>Active</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rec in roles)
            {
                <tr>
                    <td>@rec.RoleId</td>
                    <td>@rec.Code</td>
                    <td>@rec.orgNr</td>
                    <td>@rec.Description</td>
                    <td>@rec.Updated</td>
                    <td>@rec.IsActive</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<UserRoleDto>? roles;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetClient();
            await SetConfig();

            var result = await RoleService.RolesAsync(_client);
            roles = result.roles;
            _errorMessage = result.message;

            _isError = !string.IsNullOrEmpty(_errorMessage.ToString());
            _isLoading = false;
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
    }
}