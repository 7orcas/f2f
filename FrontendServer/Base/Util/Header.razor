@inherits BasePage

<PageTitle>@title</PageTitle>

<div class="title-container">
    <div class="@GetTitleClass()">@title</div>
    <div class="page-code">@PageCode</div>
</div>

<div class="@GetSubTitleClass()">@subtitle</div>

<div>
    @ChildContent
</div>
@if (isToolbar)
{
    <MudPaper Elevation="0" Outlined="@_debugOutlined">
        <div class="toolbar">
            <!-- Buttons -->
            @for (int i = 0; i < ToolBarButtons.Count; i++)
            {
                var b = ToolBarButtons[i];

                @if (b.IsLabel())
                {
                    <MudButton OnClick="b.Action">
                        <div class="@GetButtonClass(b) label label-no-link">
                            <MudText Typo="@GetTypo(GC.TextSize.ButtonText)">@b.Label</MudText>
                        </div>
                    </MudButton>
                }
                else
                {
                    <MudButton OnClick="b.Action">
                        <Label Key="@b.LangKey"
                               Class="@GetButtonClass(b)"
                               Size="GC.TextSize.ButtonText"
                               HideTooltip=true>
                        </Label>
                    </MudButton>
                }
            }
            
            <MudSpacer></MudSpacer>
        </div>
    </MudPaper>
}

@using GC = FrontendServer.GlobalConstants;

@code {
        [Parameter] public string TitleKey { get; set; }
        [Parameter] public string SubTitleKey { get; set; }
        [Parameter] public string PageCode { get; set; }
        [Parameter] public bool IsReadOnly { get; set; } = false;
        [Parameter] public List<ToolBarButton> ToolBarButtons { get; set; } = new();
        [Parameter] public RenderFragment ChildContent { get; set; }

    private string title;
    private string? subtitle;
    private bool isSubTitle;
    private bool isToolbar = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender){
            await InitialiseBasePage(GC.PerIgnore);
            title = GetLabel(TitleKey);
            isSubTitle = !string.IsNullOrEmpty(SubTitleKey);
            subtitle = isSubTitle? GetLabel(SubTitleKey) : null;

            isToolbar = ToolBarButtons != null && ToolBarButtons.Count > 0;

            StateHasChanged();
        }
    }

    private string GetTitleClass() => " title title" + GetLightDarkClassSuffix();
    private string GetSubTitleClass() => " subtitle subtitle" + GetLightDarkClassSuffix();
    
    private string GetButtonClass(ToolBarButton b)
    {
        var clazz = " toolbar-button ";
        
        if (!string.IsNullOrEmpty(b.Class))
            clazz += b.Class;
        else
            clazz += "toolbar-button"; 

        return clazz += GetLightDarkClassSuffix();
    }
}