@inherits BasePage

<PageTitle>@title</PageTitle>

<div class="title-container">
    <div class="@GetTitleClass()"><Label Size="GC.TextSize.Heading" Key=@TitleKey></Label></div>
    <div class="page-code">@PageCode</div>
</div>
<Label Size="GC.TextSize.Normal" Key="@SubTitleKey"></Label>
<div class="subtitle">
    @ChildContent
</div>
@if (isToolbar)
{
    <MudPaper Elevation="0" Outlined="@_debugOutlined">
        
        <!-- Buttons -->
        @for (int i = 0; i < ToolBarButtons.Count; i++)
        {
            var b = ToolBarButtons[i];

            <MudButton OnClick="b.Action">
                <Label Key="@b.LangKey"
                        Class="@b.Class" 
                        Size="GC.TextSize.ButtonText" 
                        HideTooltip=true                        
                >
                </Label>
            </MudButton>
        }
            
        <MudSpacer></MudSpacer>
    </MudPaper>
}

@using GC = FrontendServer.GlobalConstants;

@inject ThemeService TS

@code {
    [Parameter] public string TitleKey { get; set; }
    [Parameter] public string SubTitleKey { get; set; }
    [Parameter] public string PageCode { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    [Parameter] public List<ToolBarButton> ToolBarButtons { get; set; } = new();
    [Parameter] public RenderFragment ChildContent { get; set; }

    private string title;
    private bool isSubTitle;
    private bool isToolbar = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender){
            await InitialiseBasePage(GC.PerIgnore);
            title = GetLabel(TitleKey);
            isSubTitle = string.IsNullOrEmpty(SubTitleKey);

            isToolbar = ToolBarButtons != null && ToolBarButtons.Count > 0;

            StateHasChanged();
        }
    }

    private string GetTitleClass()
    {
        if (TS.IsDarkMode)
            return " title title-dm";
        return " title title-lm"; 
    }
}