@page "/"
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject CacheService Cache

@using GC = FrontendServer.GlobalConstants;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore


<PageTitle>Index</PageTitle>

<h1>Welcome to Blue.</h1>

<p></p>
<p></p>
<p></p>
<p>Token key: @tokenkey</p>
<p>Token: @token</p>


@code {
    private string tokenkey = string.Empty;
    private string token = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await ProtectedSessionStore.GetAsync<string>(GC.TokenCacheKey);
            if (!string.IsNullOrEmpty(token) &&
                token.StartsWith(LoginTokenDto.TOKEN_PREFIX))
            {
                token = token.Substring(LoginTokenDto.TOKEN_PREFIX_LENGTH);
                await ProtectedSessionStore.SetAsync(GC.TokenCacheKey, token);
                var client = HttpClientFactory.CreateClient(GC.AuthorizedClientKey);
                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(GC.BearerKey, token);

                //Get Labels
                var response = await client.GetAsync("api/Label/list/en");
                var r = await response.Content.ReadAsStringAsync();
                var dto = JsonConvert.DeserializeObject<_ResponseDto>(r);

                if (dto.Valid)
                {
                    var list = JsonConvert.DeserializeObject<List<LangLabelDto>>(dto.Result.ToString());
                    var d = new Dictionary<string, LangLabelDto>();
                    foreach (var l in list)
                        d.Add(l.LabelCode, l);
                    Cache.PutLabels(d);
                }

            }

        }
    }


    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(token)) return;

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        // Parse the query string
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // Get a specific query parameter value
        if (query.TryGetValue("tk", out var value))
        {
            tokenkey = value;
        }
        var client = HttpClientFactory.CreateClient(GC.UnAuthorizedClientKey);
        var tokenResponse = await client.GetAsync("api/Token/token?key=" + tokenkey);
        token = await tokenResponse.Content.ReadAsStringAsync();
    }

}
