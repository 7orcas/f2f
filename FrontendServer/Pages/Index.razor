@page "/"
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject SessionTokenStorageService TokenStorage

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore


<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<p>Tokenkey in url: @tokenkey</p>
<p>Token on server: @token</p>


@code {
    private string tokenkey = string.Empty;
    private string token;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
         if (firstRender)
         {
            //     SessionService.SetSessionValue("token", token);

            var result = await ProtectedSessionStore.GetAsync<string>("tokenX");
            if (!result.Success && !string.IsNullOrEmpty(token))
                await ProtectedSessionStore.SetAsync("tokenX", token);

            // await TokenStorage.InitializeAsync(); // Enable interop after rendering
            // if (!string.IsNullOrEmpty(token))
            //     await TokenStorage.SetTokenAsync(token);
         }
    }


    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        // Parse the query string
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // Get a specific query parameter value
        if (query.TryGetValue("tk", out var value))
        {
            tokenkey = value;
        }
        var client = HttpClientFactory.CreateClient("BackendApi");
        var tokenResponse = await client.GetAsync("api/Token/token?key=" + tokenkey);
        token = await tokenResponse.Content.ReadAsStringAsync();
        StateHasChanged();
    }

}
