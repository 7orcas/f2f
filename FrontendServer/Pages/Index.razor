@page "/"
@inherits BasePage
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject CacheService Cache
@inject IJSRuntime JS

@using GC = FrontendServer.GlobalConstants;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@using sysJ = System.Text.Json

@if (_isLoading)
{
    <Loading />
}
else @if (_isError)
{
    <AppError Message=@_errorMessage>
        @exception
    </AppError>
}
else
{
    <PageTitle>Index</PageTitle>

    <h1>Welcome to Blue.</h1>

    <p></p>
    <p></p>
    <p>
        <table>
            <thead>
                <tr><th></th><th></th></tr>
            </thead>
            <tbody>
                <tr><td>Org:</td><td><b>@userParameters?.org</b></td></tr>
                <tr><td>LangCode:</td><td><b>@userParameters?.lang</b></td></tr>
                <tr><td>UserId:</td><td><b>@userParameters?.userId</b></td></tr>
                <tr><td>SessionId:</td><td><b>@userParameters?.sessionId</b></td></tr>
                <tr><td>Loaded:</td><td><b>@userParameters?.loaded</b></td></tr>
                <tr><td>Token key:</td><td><b>@userParameters?.tokenkey</b></td></tr>
                <tr><td>Token:</td><td><b>@userParameters?.token</b></td></tr>
            </tbody>
        </table>
    </p>
}

@code {
    private string tokenkey = string.Empty;
    private string token = string.Empty;
    private string autoOpen = string.Empty;
    private UserParameters userParameters;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await Task.Delay(100); // Pause to make it work

        if (firstRender && !_isError)
        {
            //Already loged in?
            var result = await ProtectedSessionStore.GetAsync<string>(GC.TokenCacheKey);
            if (result.Success)
            {
                var up = await GetCacheString("UP");
                userParameters = JsonConvert.DeserializeObject<UserParameters>(up);
                _isLoading = false;
                StateHasChanged();
                return;
            }


            // Get the token key to use to get the actual token
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
            if (query.TryGetValue("tk", out var value))
                tokenkey = value;
            //Must be logged out
            else
            {
                _isLoading = false;
                _isError = false;
                StateHasChanged();
                return;
            }

            userParameters = new UserParameters();
            userParameters.tokenkey = tokenkey;

            //Get the token
            var clientU = HttpClientFactory.CreateClient(GC.UnAuthorizedClientKey);
            var tokenResponse = await clientU.GetAsync("api/Token/token?key=" + tokenkey);
            token = await tokenResponse.Content.ReadAsStringAsync();
            token = token.Substring(LoginTokenDto.TOKEN_PREFIX_LENGTH);
            await ProtectedSessionStore.SetAsync(GC.TokenCacheKey, token);
            var client = HttpClientFactory.CreateClient(GC.AuthorizedClientKey);
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(GC.BearerKey, token);
            userParameters.token = token;

            //Get App Config
            var cl = await client.GetAsync(GC.URL_config);
            userParameters.loaded = AppendMarkupString(userParameters.loaded, GC.URL_config);
            var cls = await cl.Content.ReadAsStringAsync();
            var cdto = JsonConvert.DeserializeObject<_ResponseDto>(cls);
            if (!cdto.Valid)
            {
                _isLoading = false;
                _isError = true;
                _errorMessage = new MarkupString("Missing Config");
                StateHasChanged();
                return;
            }
            var cjson = cdto.Result.ToString();
            await ProtectedSessionStore.SetAsync(GC.ConfigCacheKey, cjson);
            var config = JsonConvert.DeserializeObject<AppConfigDto>(cjson);
            userParameters.Add(config);

            //Get Labels
            if (!Cache.HasLabels(config.Label.LangCode))
            {
                var url = GC.URL_label_clientlist + config.Label.LangCode;
                var rl = await client.GetAsync(url);
                userParameters.loaded = AppendMarkupString(userParameters.loaded, url);
                var rls = await rl.Content.ReadAsStringAsync();
                var rdto = JsonConvert.DeserializeObject<_ResponseDto>(rls);

                if (rdto.Valid)
                {
                    var labels = JsonConvert.DeserializeObject<List<LangLabelDto>>(rdto.Result.ToString());
                    var dic = new Dictionary<string, LangLabelDto>();
                    foreach (var l in labels)
                        dic.Add(l.LangKeyCode, l);
                    Cache.PutLabels(config.Label.LangCode, dic);
                }
            }

            PutCacheString("UP", sysJ.JsonSerializer.Serialize(userParameters));
            _isLoading = false;
            StateHasChanged();

            //Is there an auto open?
            if (query.TryGetValue("open", out var autoOpenX))
            {
                if (ModPageRoutes.IsRoute(autoOpenX))
                    NavigationManager.NavigateTo("/" + ModPageRoutes.GetRoute(autoOpenX));
            }

        }
    }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
    }

    public class UserParameters
    {
        public string tokenkey { get; set; }
        public string token  { get; set; }
        public string org  { get; set; }
        public string lang  { get; set; }
        public string userId  { get; set; }
        public string sessionId  { get; set; }
        public MarkupString loaded { get; set; }

        public void Add(AppConfigDto config)
        {
            org = config.OrgDescription;
            lang = config.Label.LangCode;
            userId = config.UniqueUserId.ToString();
            sessionId = config.UniqueSessionId.ToString();
        }
    }

}
