@page "/"
@inherits BasePage
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject CacheService Cache

@using GC = FrontendServer.GlobalConstants;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore


@if (_isLoading)
{
    <Loading />
}
else @if (_isError)
{
    <AppError Message=@_errorMessage>
        @exception
    </AppError>
}
else
{
    <PageTitle>Index</PageTitle>

    <h1>Welcome to Blue.</h1>

    <p></p>
    <p></p>
    <p></p>
    <p>Token key: @tokenkey</p>
    <p>Token: @token</p>
}

@code {
    private string tokenkey = string.Empty;
    private string token = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(500); // Pause for half a second
        if (firstRender && !_isError)
        {
            var result = await ProtectedSessionStore.GetAsync<string>(GC.TokenCacheKey);
            if (!string.IsNullOrEmpty(token) &&
                token.StartsWith(LoginTokenDto.TOKEN_PREFIX))
            {
                token = token.Substring(LoginTokenDto.TOKEN_PREFIX_LENGTH);
                await ProtectedSessionStore.SetAsync(GC.TokenCacheKey, token);
                var client = HttpClientFactory.CreateClient(GC.AuthorizedClientKey);
                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(GC.BearerKey, token);

                //Get App Config
                var cl = await client.GetAsync(GC.URL_config);
                var cls = await cl.Content.ReadAsStringAsync();
                var cdto = JsonConvert.DeserializeObject<_ResponseDto>(cls);
                if (!cdto.Valid)
                {
                    _isLoading = false;
                    _isError = true;
                    _errorMessage = new MarkupString("Missing Config");
                    StateHasChanged();
                    return;
                }
                var cjson = cdto.Result.ToString();
                await ProtectedSessionStore.SetAsync(GC.ConfigCacheKey, cjson);
                var config = JsonConvert.DeserializeObject<AppConfigDto>(cjson);


                //Get Labels
                var rl = await client.GetAsync(GC.URL_label_list + config.LangCode);
                var rls = await rl.Content.ReadAsStringAsync();
                var rdto = JsonConvert.DeserializeObject<_ResponseDto>(rls);

                if (rdto.Valid)
                {
                    var labels = JsonConvert.DeserializeObject<List<LangLabelDto>>(rdto.Result.ToString());
                    var dic = new Dictionary<string, LangLabelDto>();
                    foreach (var l in labels)
                        dic.Add(l.LabelCode, l);
                    Cache.PutLabels(dic, config.LangCode);
                }

            }

        }
    }


    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(token)) return;

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        // Parse the query string
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // Get a specific query parameter value
        if (query.TryGetValue("tk", out var value))
        {
            tokenkey = value;
        }
        
        var client = HttpClientFactory.CreateClient(GC.UnAuthorizedClientKey);
        var tokenResponse = await client.GetAsync("api/Token/token?key=" + tokenkey);
        token = await tokenResponse.Content.ReadAsStringAsync();
    }

}
