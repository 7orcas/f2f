@inherits LayoutComponentBase
@inject LabelService LS
@inject ThemeService TS
@using GC = FrontendServer.GlobalConstants;

<MudThemeProvider DefaultScrollbar="true" @bind-IsDarkMode="_isDarkMode" Theme="_theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>

    <MudAppBar Elevation="4" Class="app-bar">
        <div style="display: flex; align-items: center; width: 100%; justify-content: space-between;">

            <!-- Left -->
            <div style="display: flex; align-items: center;">
                <MudIconButton Icon="@Icons.Material.Filled.Menu"
                               Color="Color.Inherit"
                               Edge="Edge.Start"
                               OnClick="@ToggleDrawer" />
                <MudText Typo="Typo.h6" Class="ml-2">Blue</MudText>
            </div>

            <!-- Center: Menu items -->
            <div style="display: flex; gap: 16px;">
                <MainMenu />
            </div>

            <!-- Right -->
            <div style="display: flex; align-items: center; gap: 12px;">
                <MudSwitch @bind-Value="_isDarkMode"
                           T="bool"
                           Label="Light/Dark Mode" />

                <MudAvatar Size="Size.Medium"
                            Color="Color.Primary"
                            Icon="@Icons.Material.Filled.AccountCircle"
                            Style="cursor: pointer;" />
        
                <MudIconButton Icon="@Icons.Material.Filled.Settings"
                                Color="Color.Inherit"
                                Href="/settings" />
            </div>

        </div>
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen"
               Elevation="1"
               ClipMode="DrawerClipMode.Always"
               Variant="DrawerVariant.Responsive">
        <MudNavMenu>
            <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
            <MudNavLink Href="/settings" Icon="@Icons.Material.Filled.Settings">Settings</MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent Class="main-content-fill-screen">
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>

</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkModeBacking = false;

    private bool _isDarkMode
    {
        get => _isDarkModeBacking;
        set
        {
            _isDarkModeBacking = value;
            TS.SetDarkMode(value);
            StateHasChanged();
        }
    }

    private string lOrg = "Organisations";
    private string lMac = "Machines";

    private MudTheme _theme = new MudTheme
        {
            PaletteLight = new PaletteLight
            {
                AppbarText = "#FFFFFF",
                AppbarBackground = "#1976d2",

                Primary = "#1976d2",
                Secondary = "#e91e63",
                Background = "#f5f5f5",
                TextPrimary = "#212121",
                DrawerBackground = "#ffffff",

            },
            PaletteDark = new PaletteDark
            {
                AppbarBackground = "#2A2D3E",   // Soft steel blue-gray
                AppbarText = "#E0E0E0",         // Muted white for comfort

                Background = "#1E1E2F",         // Deep but not harsh
                Surface = "#2A2D3E",            // Match or complement AppBar
                Primary = "#90CAF9",            // Soft blue (Material Blue 200)
                PrimaryContrastText = "#1E1E2F",// Text on primary buttons

                TextPrimary = "#E0E0E0",        // Light gray for standard text
                TextSecondary = "#A0A0B2",      // Dimmer for subtext
                DrawerBackground = "#2C2F3A",   // Slightly lighter for depth
            },
        };


    protected override void OnInitialized()
    {
        LS.OnLabelsChanged += RefreshLayout;
        TS.SetDarkMode(_isDarkMode);
    }


    private void RefreshLayout() 
    {
        lOrg = LS.GetLabel("Orgs");
        lMac = LS.GetLabel("Machines");
        InvokeAsync(StateHasChanged);
    }


    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;
    public void Dispose() => LS.OnLabelsChanged -= RefreshLayout;
    


    private void Logout()
    {
        
    }

}