@page "/machines"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject MachineService MachineService
@using Newtonsoft.Json;

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore



<h3>Machines</h3>

@if (_isLoading)
{
    <div>loading....</div>
}
        
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Code</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var machine in machines)
            {
                <tr>
                    <td>@machine.Code</td>
                    <td>@machine.Description</td>
                </tr>
            }
        </tbody>
    </table>

    <p>Token in storage: @token</p>
}

@code {
    private List<MachineDto>? machines;
    private bool _isLoading = true;
    private string token;

    private void ThrowException()
    {
        throw new InvalidOperationException("This is a test exception.");
    }

    private void Recover()
    {
        //        errorBoundary.Recover();
    }

    protected override async Task OnInitializedAsync()
    {
        /*
        string token = null;
        var result = await ProtectedSessionStore.GetAsync<string>("token");
        if (result.Success)
            token = result.Value;
        */
        // Func<Task> lambda = async () => machines = await MachineService.MachinesAsync(token);
        // await Run(lambda);
        machines = await MachineService.MachinesAsync(token);
        _isLoading = false;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await ProtectedSessionStore.GetAsync<string>("tokenX");
            if (result.Success)
                token = result.Value;
        }
    }

    public async Task Run(Func<Task> action)
    {
        try
        {
            await action();
        }
        catch (Exception x)
        {
            //exception = x;
            //_isError = true;
        }
        finally
        {
            _isLoading = false;
        }
    }
}